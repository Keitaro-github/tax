import os.path
import sys
import json
import logging
from datetime import datetime


class TMSLogger:
    """
    This class implements the simple wrapper for standard logging module.
    """

    def __init__(self, logger_type):
        self.__location = None
        self.__level = None
        self.__format = None
        self.__logger = None
        self.__logger_type = logger_type

    def setup(self) -> bool:
        """
        This method is intended to set up TMS logger based on setting
        described on log_config.json file. All logs should be stored
        in autogenerated cache folder.
        Returns: True if set up has been completed successfully, False otherwise.
        """
        try:
            with open("Code/configs/log_config.json", 'r') as log_config_file:
                log_configs = json.loads(log_config_file.read())
        except OSError:
            self.log_critical("Could not get LOG configs. Please, check Code/configs/log_config.json file")
            return False

        try:
            # Access the appropriate log configuration based on logger type
            log_config = log_configs[self.__logger_type + "_logs"]
            self.__location = log_config["location"]
            self.__level = log_config["level"]
            self.__format = log_config["format"]
        except KeyError as exception:
            self.log_critical(exception)
            return False

        if not os.path.isdir(self.__location):
            try:
                os.makedirs(self.__location)
            except OSError:
                self.log_critical("Could not create cache folder")
                return False

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(self.__location, f"logs_{timestamp}.txt")

        # Get corresponding level number by level name
        self.__level = logging.getLevelName(self.__level)

        # Configure logger settings with a custom name based on logger type
        self.__logger = logging.getLogger(self.__logger_type)
        formatter = logging.Formatter(self.__format)
        file_handler = logging.FileHandler(filename)
        file_handler.setFormatter(formatter)
        stream_handler = logging.StreamHandler()
        stream_formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s") # Custom format for stream handler
        stream_handler.setFormatter(stream_formatter)

        self.__logger.setLevel(self.__level)
        self.__logger.addHandler(file_handler)
        self.__logger.addHandler(stream_handler)

        # Disable propagation of debug messages from the root logger to the child logger
        self.__logger.propagate = False

        return True

    def log_critical(self, message) -> None:
        """
        This method logs a message with the critical logging level.
        Args:
            message: The message to log.
        Returns: None
        """
        if self.__logger is None:
            logging.critical("Could not log the message. Please set up TMS logger first.")
        else:
            self.__logger.critical(message)

    def log_error(self, message):
        """
        This method logs a message with the error logging level.
        Args:
            message: The message to log.
        Returns: None
        """
        if self.__logger is None:
            logging.critical("Could not log the message. Please set up TMS logger first.")
        else:
            self.__logger.error(message)

    def log_info(self, message):
        """
        This method logs a message with the info logging level.
        Args:
            message: The message to log.
        Returns: None
        """
        if self.__logger is None:
            logging.critical("Could not log the message. Please set up TMS logger first.")
        else:
            self.__logger.info(message)

    def log_debug(self, message):
        """
        This method logs a message with the debug logging level.
        Args:
            message: The message to log.
        Returns: None
        """
        if self.__logger is None:
            self.log_critical("Could not log the message. Please set up TMS logger first.")
        else:
            self.__logger.debug(message)


if __name__ == "__main__":
    server_logger = TMSLogger("server")
    client_logger = TMSLogger("client")

    if not server_logger.setup() or not client_logger.setup():
        sys.exit(1)
